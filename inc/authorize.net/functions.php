<?php
require_once('./vendor/autoload.php');

use net\authorize\api\contract\v1 as AnetAPI;
use net\authorize\api\controller as AnetController;

define("AUTHORIZENET_LOG_FILE", "phplog");

// Settings Page: Authorize.net
// Retrieving values: get_option( 'your_field_id' )
class authorizenet_Settings_Page
{

    public function __construct()
    {
        add_action('admin_menu', array($this, 'wph_create_settings'));
        add_action('admin_init', array($this, 'wph_setup_sections'));
        add_action('admin_init', array($this, 'wph_setup_fields'));
    }

    public function wph_create_settings()
    {
        $page_title = 'Authorize.net Settings';
        $menu_title = 'Authorize.net';
        $capability = 'manage_options';
        $slug = 'authorizenet';
        $callback = array($this, 'wph_settings_content');
        add_options_page($page_title, $menu_title, $capability, $slug, $callback);
    }

    public function wph_settings_content()
    { ?>
<div class="wrap">
    <h1>Authorize.net Settings</h1>
    <?php settings_errors(); ?>
    <form method="POST" action="options.php">
        <?php
                settings_fields('authorizenet');
                do_settings_sections('authorizenet');
                submit_button();
                ?>
    </form>
</div> <?php
            }

            public function wph_setup_sections()
            {
                add_settings_section('authorizenet_section', 'Settings to interface with the Authorize.net API for online payments.', array(), 'authorizenet');
            }

            public function wph_setup_fields()
            {
                $fields = array(
                    array(
                        'label' => 'Login ID',
                        'id' => 'MERCHANT_LOGIN_ID',
                        'type' => 'text',
                        'section' => 'authorizenet_section',
                        'desc' => 'Login ID generated by the Authorize.net account *Required',
                    ),
                    array(
                        'label' => 'Transaction Key',
                        'id' => 'MERCHANT_TRANSACTION_KEY',
                        'type' => 'text',
                        'section' => 'authorizenet_section',
                        'desc' => 'Transaction Key generated by the Authorize.net account *Required',
                    ),
                    array(
                        'label' => 'Key',
                        'id' => 'MERCHANT_KEY',
                        'type' => 'text',
                        'section' => 'authorizenet_section',
                        'desc' => 'For Testing, Optional? Leave blank if unsure.',
                    ),
                    array(
                        'label' => 'Environment',
                        'id' => 'aNetENV',
                        'type' => 'select',
                        'section' => 'authorizenet_section',
                        'options' => array(
                            'SANDBOX' => 'Testing',
                            'PRODUCTION' => 'Production',
                        ),
                        'desc' => 'Set to Production for Live sites',
                        'placeholder' => 'SANDBOX',
                        'default' => 'SANDBOX',
                    ),
                );
                foreach ($fields as $field) {
                    add_settings_field($field['id'], $field['label'], array($this, 'wph_field_callback'), 'authorizenet', $field['section'], $field);
                    register_setting('authorizenet', $field['id']);
                }
            }

            public function wph_field_callback($field)
            {
                $value = get_option($field['id']);
                $placeholder = '';
                if (isset($field['placeholder'])) {
                    $placeholder = $field['placeholder'];
                }
                switch ($field['type']) {
                    case 'select':
                    case 'multiselect':
                        if (!empty($field['options']) && is_array($field['options'])) {
                            $attr = '';
                            $options = '';
                            foreach ($field['options'] as $key => $label) {
                                $options .= sprintf(
                                    '<option value="%s" %s>%s</option>',
                                    $key,
                                    selected($value, $key, false),
                                    $label
                                );
                            }
                            if ($field['type'] === 'multiselect') {
                                $attr = ' multiple="multiple" ';
                            }
                            printf(
                                '<select name="%1$s" id="%1$s" %2$s>%3$s</select>',
                                $field['id'],
                                $attr,
                                $options
                            );
                        }
                        break;
                    default:
                        printf(
                            '<input name="%1$s" id="%1$s" type="%2$s" placeholder="%3$s" value="%4$s" />',
                            $field['id'],
                            $field['type'],
                            $placeholder,
                            $value
                        );
                }
                if (isset($field['desc'])) {
                    if ($desc = $field['desc']) {
                        printf('<p class="description">%s </p>', $desc);
                    }
                }
            }
        }
        new authorizenet_Settings_Page();

        /** Function to get the Authorize.net form token, returns the token as a string
         * @param string $merchantID - Authorize.net Merchant ID
         * @param string $transactionKey - Authorize.net Transaction Key
         * @param float $amount - Amount to charge
         * @param string $aNetENV - Authorize.net Environment (SANDBOX or PRODUCTION)
         * @return string $token - Authorize.net Form Token
         *
         */
        function getAnAcceptPaymentPage(string $merchantID, string $transactionKey, float $amount, string $aNetENV)
        {
            // Setup the token variable
            $token = '';
            if ($aNetENV == null || $aNetENV == '') {
                $aNetENV = 'SANDBOX';
            }
            /* Create a merchantAuthenticationType object with authentication details
       retrieved from the constants file */
            $merchantAuthentication = new AnetAPI\MerchantAuthenticationType();
            $merchantAuthentication->setName($merchantID);
            $merchantAuthentication->setTransactionKey($transactionKey);

            // Set the transaction's refId
            $refId = 'ref' . time();

            // Create a transaction
            $transactionRequestType = new AnetAPI\TransactionRequestType();
            $transactionRequestType->setTransactionType("authCaptureTransaction");
            $transactionRequestType->setAmount($amount);

            // Set Hosted Form Options
            $hostedPaymentButtonOptions = new AnetAPI\SettingType();
            $hostedPaymentButtonOptions->setSettingName("hostedPaymentButtonOptions");
            $hostedPaymentButtonOptions->setSettingValue("{\"text\": \"Pay\"}");

            $hostedPaymentReturnOptions = new AnetAPI\SettingType();
            $hostedPaymentReturnOptions->setSettingName("hostedPaymentReturnOptions");
            $hostedPaymentReturnOptions->setSettingValue("{\"showReceipt\": true, \"url\": \"https://www.example.com/return\", \"cancelUrl\": \"https://www.example.com/cancel\"}");

            $hostedPaymentOrderOptions = new AnetAPI\SettingType();
            $hostedPaymentOrderOptions->setSettingName("hostedPaymentOrderOptions");
            $hostedPaymentOrderOptions->setSettingValue("{\"show\": false}");

            $hostedPaymentBillingAddressOptions = new AnetAPI\SettingType();
            $hostedPaymentBillingAddressOptions->setSettingName("hostedPaymentBillingAddressOptions");
            $hostedPaymentBillingAddressOptions->setSettingValue("{\"show\": false, \"required\": false}");

            $hostedPaymentShippingAddressOptions = new AnetAPI\SettingType();
            $hostedPaymentShippingAddressOptions->setSettingName("hostedPaymentShippingAddressOptions");
            $hostedPaymentShippingAddressOptions->setSettingValue("{\"show\": false, \"required\": false}");

            $hostedPaymentSecurityOptions = new AnetAPI\SettingType();
            $hostedPaymentSecurityOptions->setSettingName("hostedPaymentSecurityOptions");
            $hostedPaymentSecurityOptions->setSettingValue("{\"captcha\": false}");

            $hostedPaymentCustomerOptions = new AnetAPI\SettingType();
            $hostedPaymentCustomerOptions->setSettingName("hostedPaymentCustomerOptions");
            $hostedPaymentCustomerOptions->setSettingValue("{\"showEmail\": false, \"requiredEmail\": false, \"showPhoneNumber\": false, \"requiredPhoneNumber\": false}");

            $hostedPaymentPaymentOptions = new AnetAPI\SettingType();
            $hostedPaymentPaymentOptions->setSettingName("hostedPaymentPaymentOptions");
            $hostedPaymentPaymentOptions->setSettingValue("{\"cardCodeRequired\": true, \"showCreditCard\": true, \"showBankAccount\": false}");


            // Build transaction request
            $request = new AnetAPI\GetHostedPaymentPageRequest();
            $request->setMerchantAuthentication($merchantAuthentication);
            $request->setRefId($refId);
            $request->setTransactionRequest($transactionRequestType);
            // add the settings to the request
            $request->addToHostedPaymentSettings($hostedPaymentButtonOptions);
            $request->addToHostedPaymentSettings($hostedPaymentReturnOptions);
            $request->addToHostedPaymentSettings($hostedPaymentOrderOptions);
            $request->addToHostedPaymentSettings($hostedPaymentBillingAddressOptions);
            $request->addToHostedPaymentSettings($hostedPaymentShippingAddressOptions);
            $request->addToHostedPaymentSettings($hostedPaymentSecurityOptions);
            $request->addToHostedPaymentSettings($hostedPaymentCustomerOptions);
            $request->addToHostedPaymentSettings($hostedPaymentPaymentOptions);

            //execute request
            $controller = new AnetController\GetHostedPaymentPageController($request);
            $response = $controller->executeWithApiResponse(\net\authorize\api\constants\ANetEnvironment::$aNetENV);

            if (($response != null) && ($response->getMessages()->getResultCode() == "Ok")) {
                $token = $response->getToken();
            } else {
                echo "ERROR :  Failed to get hosted payment page token\n";
                $errorMessages = $response->getMessages()->getMessage();
                echo "RESPONSE : " . $errorMessages[0]->getCode() . "  " . $errorMessages[0]->getText() . "\n";
            }
            return $token;
        }
                ?>
